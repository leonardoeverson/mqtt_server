/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 571.0, "series": [{"data": [[0.0, 7.0], [0.1, 55.0], [0.2, 69.0], [0.3, 89.0], [0.4, 106.0], [0.5, 114.0], [0.6, 121.0], [0.7, 126.0], [0.8, 135.0], [0.9, 142.0], [1.0, 152.0], [1.1, 167.0], [1.2, 178.0], [1.3, 189.0], [1.4, 197.0], [1.5, 209.0], [1.6, 216.0], [1.7, 223.0], [1.8, 233.0], [1.9, 261.0], [2.0, 283.0], [2.1, 294.0], [2.2, 300.0], [2.3, 306.0], [2.4, 311.0], [2.5, 318.0], [2.6, 327.0], [2.7, 331.0], [2.8, 335.0], [2.9, 337.0], [3.0, 337.0], [3.1, 338.0], [3.2, 338.0], [3.3, 339.0], [3.4, 339.0], [3.5, 339.0], [3.6, 339.0], [3.7, 340.0], [3.8, 340.0], [3.9, 340.0], [4.0, 340.0], [4.1, 340.0], [4.2, 340.0], [4.3, 341.0], [4.4, 341.0], [4.5, 341.0], [4.6, 341.0], [4.7, 341.0], [4.8, 341.0], [4.9, 341.0], [5.0, 342.0], [5.1, 342.0], [5.2, 342.0], [5.3, 342.0], [5.4, 342.0], [5.5, 342.0], [5.6, 342.0], [5.7, 342.0], [5.8, 343.0], [5.9, 343.0], [6.0, 343.0], [6.1, 343.0], [6.2, 343.0], [6.3, 343.0], [6.4, 343.0], [6.5, 343.0], [6.6, 343.0], [6.7, 343.0], [6.8, 344.0], [6.9, 344.0], [7.0, 344.0], [7.1, 344.0], [7.2, 344.0], [7.3, 344.0], [7.4, 344.0], [7.5, 344.0], [7.6, 345.0], [7.7, 345.0], [7.8, 345.0], [7.9, 345.0], [8.0, 345.0], [8.1, 345.0], [8.2, 345.0], [8.3, 345.0], [8.4, 345.0], [8.5, 346.0], [8.6, 346.0], [8.7, 346.0], [8.8, 346.0], [8.9, 346.0], [9.0, 346.0], [9.1, 346.0], [9.2, 347.0], [9.3, 347.0], [9.4, 347.0], [9.5, 347.0], [9.6, 347.0], [9.7, 347.0], [9.8, 347.0], [9.9, 348.0], [10.0, 348.0], [10.1, 348.0], [10.2, 348.0], [10.3, 348.0], [10.4, 348.0], [10.5, 348.0], [10.6, 349.0], [10.7, 349.0], [10.8, 349.0], [10.9, 349.0], [11.0, 349.0], [11.1, 349.0], [11.2, 350.0], [11.3, 350.0], [11.4, 350.0], [11.5, 350.0], [11.6, 350.0], [11.7, 351.0], [11.8, 351.0], [11.9, 351.0], [12.0, 351.0], [12.1, 351.0], [12.2, 352.0], [12.3, 352.0], [12.4, 352.0], [12.5, 352.0], [12.6, 352.0], [12.7, 352.0], [12.8, 353.0], [12.9, 353.0], [13.0, 353.0], [13.1, 353.0], [13.2, 353.0], [13.3, 354.0], [13.4, 354.0], [13.5, 354.0], [13.6, 354.0], [13.7, 354.0], [13.8, 355.0], [13.9, 355.0], [14.0, 355.0], [14.1, 355.0], [14.2, 356.0], [14.3, 356.0], [14.4, 356.0], [14.5, 356.0], [14.6, 356.0], [14.7, 356.0], [14.8, 357.0], [14.9, 357.0], [15.0, 357.0], [15.1, 357.0], [15.2, 357.0], [15.3, 358.0], [15.4, 358.0], [15.5, 358.0], [15.6, 358.0], [15.7, 358.0], [15.8, 358.0], [15.9, 359.0], [16.0, 359.0], [16.1, 359.0], [16.2, 359.0], [16.3, 359.0], [16.4, 359.0], [16.5, 360.0], [16.6, 360.0], [16.7, 360.0], [16.8, 360.0], [16.9, 360.0], [17.0, 360.0], [17.1, 361.0], [17.2, 361.0], [17.3, 361.0], [17.4, 361.0], [17.5, 361.0], [17.6, 362.0], [17.7, 362.0], [17.8, 362.0], [17.9, 362.0], [18.0, 362.0], [18.1, 363.0], [18.2, 363.0], [18.3, 363.0], [18.4, 363.0], [18.5, 363.0], [18.6, 364.0], [18.7, 364.0], [18.8, 364.0], [18.9, 364.0], [19.0, 364.0], [19.1, 365.0], [19.2, 365.0], [19.3, 365.0], [19.4, 365.0], [19.5, 366.0], [19.6, 366.0], [19.7, 366.0], [19.8, 366.0], [19.9, 367.0], [20.0, 367.0], [20.1, 367.0], [20.2, 367.0], [20.3, 368.0], [20.4, 368.0], [20.5, 368.0], [20.6, 369.0], [20.7, 369.0], [20.8, 369.0], [20.9, 369.0], [21.0, 370.0], [21.1, 370.0], [21.2, 370.0], [21.3, 370.0], [21.4, 371.0], [21.5, 371.0], [21.6, 371.0], [21.7, 371.0], [21.8, 372.0], [21.9, 372.0], [22.0, 372.0], [22.1, 372.0], [22.2, 373.0], [22.3, 373.0], [22.4, 373.0], [22.5, 373.0], [22.6, 373.0], [22.7, 374.0], [22.8, 374.0], [22.9, 374.0], [23.0, 374.0], [23.1, 375.0], [23.2, 375.0], [23.3, 375.0], [23.4, 375.0], [23.5, 376.0], [23.6, 376.0], [23.7, 376.0], [23.8, 377.0], [23.9, 377.0], [24.0, 377.0], [24.1, 377.0], [24.2, 378.0], [24.3, 378.0], [24.4, 378.0], [24.5, 378.0], [24.6, 379.0], [24.7, 379.0], [24.8, 379.0], [24.9, 380.0], [25.0, 380.0], [25.1, 380.0], [25.2, 380.0], [25.3, 381.0], [25.4, 381.0], [25.5, 381.0], [25.6, 382.0], [25.7, 382.0], [25.8, 382.0], [25.9, 383.0], [26.0, 383.0], [26.1, 383.0], [26.2, 384.0], [26.3, 384.0], [26.4, 384.0], [26.5, 385.0], [26.6, 385.0], [26.7, 385.0], [26.8, 385.0], [26.9, 386.0], [27.0, 386.0], [27.1, 386.0], [27.2, 387.0], [27.3, 387.0], [27.4, 387.0], [27.5, 387.0], [27.6, 388.0], [27.7, 388.0], [27.8, 388.0], [27.9, 389.0], [28.0, 389.0], [28.1, 389.0], [28.2, 389.0], [28.3, 390.0], [28.4, 390.0], [28.5, 390.0], [28.6, 390.0], [28.7, 391.0], [28.8, 391.0], [28.9, 391.0], [29.0, 392.0], [29.1, 392.0], [29.2, 392.0], [29.3, 392.0], [29.4, 393.0], [29.5, 393.0], [29.6, 393.0], [29.7, 393.0], [29.8, 394.0], [29.9, 394.0], [30.0, 394.0], [30.1, 394.0], [30.2, 394.0], [30.3, 395.0], [30.4, 395.0], [30.5, 395.0], [30.6, 395.0], [30.7, 395.0], [30.8, 396.0], [30.9, 396.0], [31.0, 396.0], [31.1, 396.0], [31.2, 396.0], [31.3, 397.0], [31.4, 397.0], [31.5, 397.0], [31.6, 397.0], [31.7, 397.0], [31.8, 397.0], [31.9, 398.0], [32.0, 398.0], [32.1, 398.0], [32.2, 398.0], [32.3, 398.0], [32.4, 399.0], [32.5, 399.0], [32.6, 399.0], [32.7, 399.0], [32.8, 399.0], [32.9, 400.0], [33.0, 400.0], [33.1, 400.0], [33.2, 400.0], [33.3, 400.0], [33.4, 400.0], [33.5, 401.0], [33.6, 401.0], [33.7, 401.0], [33.8, 401.0], [33.9, 401.0], [34.0, 401.0], [34.1, 402.0], [34.2, 402.0], [34.3, 402.0], [34.4, 402.0], [34.5, 402.0], [34.6, 402.0], [34.7, 403.0], [34.8, 403.0], [34.9, 403.0], [35.0, 403.0], [35.1, 403.0], [35.2, 404.0], [35.3, 404.0], [35.4, 404.0], [35.5, 404.0], [35.6, 404.0], [35.7, 404.0], [35.8, 405.0], [35.9, 405.0], [36.0, 405.0], [36.1, 405.0], [36.2, 405.0], [36.3, 405.0], [36.4, 406.0], [36.5, 406.0], [36.6, 406.0], [36.7, 406.0], [36.8, 406.0], [36.9, 406.0], [37.0, 406.0], [37.1, 407.0], [37.2, 407.0], [37.3, 407.0], [37.4, 407.0], [37.5, 407.0], [37.6, 407.0], [37.7, 408.0], [37.8, 408.0], [37.9, 408.0], [38.0, 408.0], [38.1, 408.0], [38.2, 408.0], [38.3, 408.0], [38.4, 409.0], [38.5, 409.0], [38.6, 409.0], [38.7, 409.0], [38.8, 409.0], [38.9, 409.0], [39.0, 409.0], [39.1, 409.0], [39.2, 410.0], [39.3, 410.0], [39.4, 410.0], [39.5, 410.0], [39.6, 410.0], [39.7, 410.0], [39.8, 410.0], [39.9, 410.0], [40.0, 411.0], [40.1, 411.0], [40.2, 411.0], [40.3, 411.0], [40.4, 411.0], [40.5, 411.0], [40.6, 411.0], [40.7, 411.0], [40.8, 412.0], [40.9, 412.0], [41.0, 412.0], [41.1, 412.0], [41.2, 412.0], [41.3, 412.0], [41.4, 412.0], [41.5, 413.0], [41.6, 413.0], [41.7, 413.0], [41.8, 413.0], [41.9, 413.0], [42.0, 413.0], [42.1, 413.0], [42.2, 413.0], [42.3, 414.0], [42.4, 414.0], [42.5, 414.0], [42.6, 414.0], [42.7, 414.0], [42.8, 414.0], [42.9, 414.0], [43.0, 415.0], [43.1, 415.0], [43.2, 415.0], [43.3, 415.0], [43.4, 415.0], [43.5, 415.0], [43.6, 415.0], [43.7, 415.0], [43.8, 416.0], [43.9, 416.0], [44.0, 416.0], [44.1, 416.0], [44.2, 416.0], [44.3, 416.0], [44.4, 416.0], [44.5, 417.0], [44.6, 417.0], [44.7, 417.0], [44.8, 417.0], [44.9, 417.0], [45.0, 417.0], [45.1, 417.0], [45.2, 417.0], [45.3, 418.0], [45.4, 418.0], [45.5, 418.0], [45.6, 418.0], [45.7, 418.0], [45.8, 418.0], [45.9, 418.0], [46.0, 419.0], [46.1, 419.0], [46.2, 419.0], [46.3, 419.0], [46.4, 419.0], [46.5, 419.0], [46.6, 419.0], [46.7, 420.0], [46.8, 420.0], [46.9, 420.0], [47.0, 420.0], [47.1, 420.0], [47.2, 420.0], [47.3, 420.0], [47.4, 421.0], [47.5, 421.0], [47.6, 421.0], [47.7, 421.0], [47.8, 421.0], [47.9, 421.0], [48.0, 422.0], [48.1, 422.0], [48.2, 422.0], [48.3, 422.0], [48.4, 422.0], [48.5, 422.0], [48.6, 423.0], [48.7, 423.0], [48.8, 423.0], [48.9, 423.0], [49.0, 423.0], [49.1, 423.0], [49.2, 423.0], [49.3, 424.0], [49.4, 424.0], [49.5, 424.0], [49.6, 424.0], [49.7, 424.0], [49.8, 424.0], [49.9, 425.0], [50.0, 425.0], [50.1, 425.0], [50.2, 425.0], [50.3, 425.0], [50.4, 425.0], [50.5, 426.0], [50.6, 426.0], [50.7, 426.0], [50.8, 426.0], [50.9, 426.0], [51.0, 426.0], [51.1, 427.0], [51.2, 427.0], [51.3, 427.0], [51.4, 427.0], [51.5, 427.0], [51.6, 427.0], [51.7, 428.0], [51.8, 428.0], [51.9, 428.0], [52.0, 428.0], [52.1, 428.0], [52.2, 428.0], [52.3, 429.0], [52.4, 429.0], [52.5, 429.0], [52.6, 429.0], [52.7, 429.0], [52.8, 429.0], [52.9, 430.0], [53.0, 430.0], [53.1, 430.0], [53.2, 430.0], [53.3, 430.0], [53.4, 431.0], [53.5, 431.0], [53.6, 431.0], [53.7, 431.0], [53.8, 431.0], [53.9, 431.0], [54.0, 432.0], [54.1, 432.0], [54.2, 432.0], [54.3, 432.0], [54.4, 432.0], [54.5, 432.0], [54.6, 433.0], [54.7, 433.0], [54.8, 433.0], [54.9, 433.0], [55.0, 433.0], [55.1, 434.0], [55.2, 434.0], [55.3, 434.0], [55.4, 434.0], [55.5, 434.0], [55.6, 434.0], [55.7, 435.0], [55.8, 435.0], [55.9, 435.0], [56.0, 435.0], [56.1, 435.0], [56.2, 435.0], [56.3, 436.0], [56.4, 436.0], [56.5, 436.0], [56.6, 436.0], [56.7, 436.0], [56.8, 437.0], [56.9, 437.0], [57.0, 437.0], [57.1, 437.0], [57.2, 437.0], [57.3, 437.0], [57.4, 438.0], [57.5, 438.0], [57.6, 438.0], [57.7, 438.0], [57.8, 438.0], [57.9, 439.0], [58.0, 439.0], [58.1, 439.0], [58.2, 439.0], [58.3, 439.0], [58.4, 440.0], [58.5, 440.0], [58.6, 440.0], [58.7, 440.0], [58.8, 440.0], [58.9, 441.0], [59.0, 441.0], [59.1, 441.0], [59.2, 441.0], [59.3, 441.0], [59.4, 442.0], [59.5, 442.0], [59.6, 442.0], [59.7, 442.0], [59.8, 443.0], [59.9, 443.0], [60.0, 443.0], [60.1, 443.0], [60.2, 443.0], [60.3, 444.0], [60.4, 444.0], [60.5, 444.0], [60.6, 444.0], [60.7, 445.0], [60.8, 445.0], [60.9, 445.0], [61.0, 445.0], [61.1, 446.0], [61.2, 446.0], [61.3, 446.0], [61.4, 446.0], [61.5, 447.0], [61.6, 447.0], [61.7, 447.0], [61.8, 447.0], [61.9, 448.0], [62.0, 448.0], [62.1, 448.0], [62.2, 448.0], [62.3, 449.0], [62.4, 449.0], [62.5, 449.0], [62.6, 449.0], [62.7, 450.0], [62.8, 450.0], [62.9, 450.0], [63.0, 450.0], [63.1, 451.0], [63.2, 451.0], [63.3, 451.0], [63.4, 451.0], [63.5, 451.0], [63.6, 452.0], [63.7, 452.0], [63.8, 452.0], [63.9, 452.0], [64.0, 453.0], [64.1, 453.0], [64.2, 453.0], [64.3, 453.0], [64.4, 454.0], [64.5, 454.0], [64.6, 454.0], [64.7, 455.0], [64.8, 455.0], [64.9, 455.0], [65.0, 455.0], [65.1, 456.0], [65.2, 456.0], [65.3, 456.0], [65.4, 456.0], [65.5, 456.0], [65.6, 457.0], [65.7, 457.0], [65.8, 457.0], [65.9, 457.0], [66.0, 457.0], [66.1, 457.0], [66.2, 458.0], [66.3, 458.0], [66.4, 458.0], [66.5, 458.0], [66.6, 458.0], [66.7, 458.0], [66.8, 459.0], [66.9, 459.0], [67.0, 459.0], [67.1, 459.0], [67.2, 459.0], [67.3, 459.0], [67.4, 459.0], [67.5, 460.0], [67.6, 460.0], [67.7, 460.0], [67.8, 460.0], [67.9, 460.0], [68.0, 460.0], [68.1, 460.0], [68.2, 460.0], [68.3, 460.0], [68.4, 461.0], [68.5, 461.0], [68.6, 461.0], [68.7, 461.0], [68.8, 461.0], [68.9, 461.0], [69.0, 461.0], [69.1, 461.0], [69.2, 461.0], [69.3, 461.0], [69.4, 461.0], [69.5, 462.0], [69.6, 462.0], [69.7, 462.0], [69.8, 462.0], [69.9, 462.0], [70.0, 462.0], [70.1, 462.0], [70.2, 462.0], [70.3, 462.0], [70.4, 462.0], [70.5, 462.0], [70.6, 462.0], [70.7, 462.0], [70.8, 462.0], [70.9, 463.0], [71.0, 463.0], [71.1, 463.0], [71.2, 463.0], [71.3, 463.0], [71.4, 463.0], [71.5, 463.0], [71.6, 463.0], [71.7, 463.0], [71.8, 463.0], [71.9, 463.0], [72.0, 463.0], [72.1, 463.0], [72.2, 463.0], [72.3, 463.0], [72.4, 463.0], [72.5, 464.0], [72.6, 464.0], [72.7, 464.0], [72.8, 464.0], [72.9, 464.0], [73.0, 464.0], [73.1, 464.0], [73.2, 464.0], [73.3, 464.0], [73.4, 464.0], [73.5, 464.0], [73.6, 464.0], [73.7, 464.0], [73.8, 464.0], [73.9, 464.0], [74.0, 465.0], [74.1, 465.0], [74.2, 465.0], [74.3, 465.0], [74.4, 465.0], [74.5, 465.0], [74.6, 465.0], [74.7, 465.0], [74.8, 465.0], [74.9, 465.0], [75.0, 465.0], [75.1, 465.0], [75.2, 465.0], [75.3, 465.0], [75.4, 465.0], [75.5, 466.0], [75.6, 466.0], [75.7, 466.0], [75.8, 466.0], [75.9, 466.0], [76.0, 466.0], [76.1, 466.0], [76.2, 466.0], [76.3, 466.0], [76.4, 466.0], [76.5, 466.0], [76.6, 466.0], [76.7, 466.0], [76.8, 466.0], [76.9, 466.0], [77.0, 467.0], [77.1, 467.0], [77.2, 467.0], [77.3, 467.0], [77.4, 467.0], [77.5, 467.0], [77.6, 467.0], [77.7, 467.0], [77.8, 467.0], [77.9, 467.0], [78.0, 467.0], [78.1, 467.0], [78.2, 467.0], [78.3, 467.0], [78.4, 467.0], [78.5, 468.0], [78.6, 468.0], [78.7, 468.0], [78.8, 468.0], [78.9, 468.0], [79.0, 468.0], [79.1, 468.0], [79.2, 468.0], [79.3, 468.0], [79.4, 468.0], [79.5, 468.0], [79.6, 468.0], [79.7, 468.0], [79.8, 468.0], [79.9, 469.0], [80.0, 469.0], [80.1, 469.0], [80.2, 469.0], [80.3, 469.0], [80.4, 469.0], [80.5, 469.0], [80.6, 469.0], [80.7, 469.0], [80.8, 469.0], [80.9, 469.0], [81.0, 470.0], [81.1, 470.0], [81.2, 470.0], [81.3, 470.0], [81.4, 470.0], [81.5, 470.0], [81.6, 470.0], [81.7, 470.0], [81.8, 470.0], [81.9, 470.0], [82.0, 470.0], [82.1, 470.0], [82.2, 470.0], [82.3, 471.0], [82.4, 471.0], [82.5, 471.0], [82.6, 471.0], [82.7, 471.0], [82.8, 471.0], [82.9, 471.0], [83.0, 471.0], [83.1, 471.0], [83.2, 471.0], [83.3, 472.0], [83.4, 472.0], [83.5, 472.0], [83.6, 472.0], [83.7, 472.0], [83.8, 472.0], [83.9, 472.0], [84.0, 472.0], [84.1, 472.0], [84.2, 472.0], [84.3, 473.0], [84.4, 473.0], [84.5, 473.0], [84.6, 473.0], [84.7, 473.0], [84.8, 473.0], [84.9, 473.0], [85.0, 473.0], [85.1, 473.0], [85.2, 474.0], [85.3, 474.0], [85.4, 474.0], [85.5, 474.0], [85.6, 474.0], [85.7, 474.0], [85.8, 474.0], [85.9, 474.0], [86.0, 475.0], [86.1, 475.0], [86.2, 475.0], [86.3, 475.0], [86.4, 475.0], [86.5, 475.0], [86.6, 475.0], [86.7, 475.0], [86.8, 476.0], [86.9, 476.0], [87.0, 476.0], [87.1, 476.0], [87.2, 476.0], [87.3, 476.0], [87.4, 476.0], [87.5, 477.0], [87.6, 477.0], [87.7, 477.0], [87.8, 477.0], [87.9, 477.0], [88.0, 477.0], [88.1, 478.0], [88.2, 478.0], [88.3, 478.0], [88.4, 478.0], [88.5, 478.0], [88.6, 479.0], [88.7, 479.0], [88.8, 479.0], [88.9, 479.0], [89.0, 479.0], [89.1, 479.0], [89.2, 480.0], [89.3, 480.0], [89.4, 480.0], [89.5, 480.0], [89.6, 480.0], [89.7, 481.0], [89.8, 481.0], [89.9, 481.0], [90.0, 481.0], [90.1, 481.0], [90.2, 482.0], [90.3, 482.0], [90.4, 482.0], [90.5, 482.0], [90.6, 483.0], [90.7, 483.0], [90.8, 483.0], [90.9, 483.0], [91.0, 483.0], [91.1, 484.0], [91.2, 484.0], [91.3, 484.0], [91.4, 484.0], [91.5, 485.0], [91.6, 485.0], [91.7, 485.0], [91.8, 485.0], [91.9, 486.0], [92.0, 486.0], [92.1, 486.0], [92.2, 486.0], [92.3, 486.0], [92.4, 487.0], [92.5, 487.0], [92.6, 487.0], [92.7, 487.0], [92.8, 488.0], [92.9, 488.0], [93.0, 488.0], [93.1, 488.0], [93.2, 489.0], [93.3, 489.0], [93.4, 489.0], [93.5, 489.0], [93.6, 490.0], [93.7, 490.0], [93.8, 490.0], [93.9, 491.0], [94.0, 491.0], [94.1, 491.0], [94.2, 491.0], [94.3, 492.0], [94.4, 492.0], [94.5, 492.0], [94.6, 493.0], [94.7, 493.0], [94.8, 493.0], [94.9, 494.0], [95.0, 494.0], [95.1, 494.0], [95.2, 495.0], [95.3, 495.0], [95.4, 496.0], [95.5, 496.0], [95.6, 496.0], [95.7, 497.0], [95.8, 497.0], [95.9, 498.0], [96.0, 498.0], [96.1, 499.0], [96.2, 500.0], [96.3, 500.0], [96.4, 501.0], [96.5, 502.0], [96.6, 502.0], [96.7, 503.0], [96.8, 503.0], [96.9, 504.0], [97.0, 505.0], [97.1, 505.0], [97.2, 506.0], [97.3, 507.0], [97.4, 508.0], [97.5, 508.0], [97.6, 509.0], [97.7, 510.0], [97.8, 511.0], [97.9, 512.0], [98.0, 513.0], [98.1, 514.0], [98.2, 514.0], [98.3, 515.0], [98.4, 516.0], [98.5, 516.0], [98.6, 517.0], [98.7, 518.0], [98.8, 519.0], [98.9, 520.0], [99.0, 521.0], [99.1, 522.0], [99.2, 523.0], [99.3, 524.0], [99.4, 526.0], [99.5, 528.0], [99.6, 531.0], [99.7, 534.0], [99.8, 537.0], [99.9, 545.0], [100.0, 571.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1278.0, "minX": 0.0, "maxY": 221328.0, "series": [{"data": [[0.0, 1278.0], [300.0, 107330.0], [100.0, 3658.0], [200.0, 2681.0], [400.0, 221328.0], [500.0, 13299.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12758.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 336816.0, "series": [{"data": [[0.0, 336816.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 12758.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 1.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 194.02801090690178, "minX": 1.56225174E12, "maxY": 250.0, "series": [{"data": [[1.56225216E12, 250.0], [1.56225186E12, 250.0], [1.56225234E12, 241.66933207902161], [1.56225204E12, 250.0], [1.56225174E12, 194.02801090690178], [1.56225222E12, 250.0], [1.56225192E12, 250.0], [1.5622521E12, 250.0], [1.5622518E12, 250.0], [1.56225228E12, 250.0], [1.56225198E12, 250.0]], "isOverall": false, "label": "Grupo de Usu\u00E1rios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56225234E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 40.666666666666664, "minX": 1.0, "maxY": 472.1111111111109, "series": [{"data": [[2.0, 197.0], [3.0, 203.0], [4.0, 203.0], [5.0, 207.0], [6.0, 249.0], [7.0, 250.0], [8.0, 111.47058823529412], [9.0, 40.666666666666664], [10.0, 43.03030303030303], [11.0, 71.26666666666667], [12.0, 57.52777777777777], [13.0, 42.857142857142854], [14.0, 52.37931034482759], [15.0, 52.734693877551024], [16.0, 57.2], [17.0, 52.88095238095237], [18.0, 61.348837209302324], [19.0, 70.83870967741935], [20.0, 72.37837837837839], [21.0, 65.06976744186048], [22.0, 70.43243243243242], [23.0, 69.77272727272728], [24.0, 65.97777777777777], [25.0, 71.06976744186048], [26.0, 83.3125], [27.0, 85.84444444444442], [28.0, 80.64285714285715], [29.0, 109.47368421052633], [30.0, 100.32142857142856], [31.0, 67.33870967741933], [32.0, 83.00000000000001], [33.0, 75.96226415094335], [34.0, 92.02083333333334], [35.0, 82.18367346938774], [36.0, 80.60000000000002], [37.0, 105.6923076923077], [38.0, 115.34782608695649], [39.0, 107.75510204081635], [40.0, 111.50000000000001], [41.0, 101.47727272727273], [42.0, 119.60465116279069], [43.0, 119.45652173913044], [44.0, 120.54545454545456], [45.0, 124.06382978723406], [46.0, 129.90243902439028], [47.0, 148.27083333333331], [48.0, 111.25], [49.0, 114.0952380952381], [50.0, 96.65624999999996], [51.0, 119.55384615384614], [52.0, 131.20000000000002], [53.0, 127.59574468085106], [54.0, 112.43750000000001], [55.0, 120.49090909090908], [56.0, 129.29411764705878], [57.0, 141.16000000000003], [58.0, 138.94915254237284], [59.0, 132.97872340425533], [60.0, 143.47272727272727], [61.0, 132.11475409836063], [62.0, 125.76666666666665], [63.0, 120.5522388059701], [64.0, 126.20312500000001], [65.0, 118.82089552238808], [66.0, 128.16129032258067], [67.0, 119.54929577464787], [68.0, 124.05633802816901], [69.0, 115.82857142857142], [70.0, 134.8653846153846], [71.0, 168.3333333333334], [72.0, 171.94545454545462], [73.0, 149.84722222222229], [74.0, 131.453125], [75.0, 150.741935483871], [76.0, 146.40625000000003], [77.0, 132.49999999999997], [78.0, 162.4255319148936], [79.0, 190.50847457627125], [80.0, 159.00000000000003], [81.0, 142.79104477611943], [82.0, 156.1538461538462], [83.0, 144.39393939393932], [84.0, 173.3962264150944], [85.0, 169.64383561643834], [86.0, 169.0980392156863], [87.0, 204.8510638297872], [88.0, 215.90740740740742], [89.0, 174.30769230769232], [90.0, 169.38636363636363], [91.0, 206.56603773584905], [92.0, 211.28985507246375], [93.0, 161.94029850746267], [94.0, 167.75862068965517], [95.0, 212.35483870967738], [96.0, 190.84375], [97.0, 168.21505376344092], [98.0, 210.77777777777783], [99.0, 221.45999999999998], [100.0, 217.89552238805976], [101.0, 201.48214285714286], [102.0, 207.14545454545458], [103.0, 220.95238095238093], [104.0, 213.89830508474583], [105.0, 217.41071428571425], [106.0, 218.9642857142857], [107.0, 225.01666666666668], [108.0, 235.27272727272728], [109.0, 227.96969696969703], [110.0, 218.54838709677418], [111.0, 198.24675324675323], [112.0, 180.69999999999993], [113.0, 183.5151515151515], [114.0, 217.24561403508773], [115.0, 253.31111111111107], [116.0, 272.7560975609756], [117.0, 301.7758620689654], [118.0, 278.35937499999994], [119.0, 225.11594202898553], [120.0, 221.99999999999997], [121.0, 236.38157894736838], [122.0, 197.45652173913038], [123.0, 183.60606060606065], [124.0, 191.55555555555554], [125.0, 199.23999999999998], [126.0, 193.89333333333332], [127.0, 211.21875], [128.0, 247.13725490196083], [129.0, 265.4193548387097], [130.0, 274.85714285714295], [131.0, 293.5348837209302], [132.0, 300.6666666666667], [133.0, 307.1176470588234], [134.0, 312.0645161290323], [135.0, 302.53968253968253], [136.0, 284.6739130434782], [137.0, 295.56060606060595], [138.0, 300.17391304347836], [139.0, 298.69999999999993], [140.0, 301.8947368421053], [141.0, 304.6346153846153], [142.0, 312.89999999999986], [143.0, 305.03636363636366], [144.0, 290.44444444444446], [145.0, 283.43076923076916], [146.0, 292.75], [147.0, 305.257575757576], [148.0, 318.06818181818176], [149.0, 321.4166666666667], [150.0, 316.96721311475414], [151.0, 315.51724137931024], [152.0, 326.3636363636364], [153.0, 355.804347826087], [154.0, 296.3239436619719], [155.0, 235.71764705882353], [156.0, 279.45762711864404], [157.0, 297.56896551724134], [158.0, 345.9767441860466], [159.0, 359.80000000000007], [160.0, 338.6025641025641], [161.0, 260.79761904761904], [162.0, 239.0759493670886], [163.0, 259.6666666666667], [164.0, 296.4259259259258], [165.0, 343.04761904761904], [166.0, 373.8085106382979], [167.0, 373.03773584905656], [168.0, 366.87323943661977], [169.0, 357.65957446808517], [170.0, 364.0], [171.0, 377.6666666666667], [172.0, 367.1594202898551], [173.0, 320.77611940298505], [174.0, 311.35185185185185], [175.0, 347.8545454545454], [176.0, 383.8571428571429], [177.0, 353.79166666666663], [178.0, 331.6792452830188], [179.0, 343.18461538461537], [180.0, 353.43181818181813], [181.0, 329.47058823529414], [182.0, 321.3970588235294], [183.0, 332.17543859649123], [184.0, 364.47058823529414], [185.0, 376.3114754098361], [186.0, 383.359375], [187.0, 387.0], [188.0, 387.05084745762724], [189.0, 393.4181818181818], [190.0, 411.79591836734687], [191.0, 433.05555555555554], [192.0, 436.5254237288135], [193.0, 449.31250000000006], [194.0, 455.4090909090909], [195.0, 439.12280701754383], [196.0, 429.525], [197.0, 368.48], [198.0, 312.7272727272728], [199.0, 307.71428571428567], [200.0, 311.9605263157894], [201.0, 317.9673913043479], [202.0, 385.3333333333333], [203.0, 397.92537313432825], [204.0, 429.40740740740733], [205.0, 463.3243243243243], [206.0, 413.42105263157896], [207.0, 376.5238095238094], [208.0, 361.9480519480519], [209.0, 363.12500000000017], [210.0, 402.33333333333337], [211.0, 428.64285714285705], [212.0, 443.82608695652175], [213.0, 449.1142857142856], [214.0, 410.56626506024105], [215.0, 363.5270270270271], [216.0, 331.62195121951214], [217.0, 366.3880597014925], [218.0, 380.06060606060606], [219.0, 402.9275362318842], [220.0, 395.22950819672116], [221.0, 399.09000000000003], [222.0, 389.8076923076923], [223.0, 429.0344827586207], [224.0, 445.9565217391304], [225.0, 447.72727272727275], [226.0, 425.94805194805195], [227.0, 364.4285714285714], [228.0, 343.6404494382022], [229.0, 338.56756756756755], [230.0, 353.7866666666667], [231.0, 362.9749999999999], [232.0, 377.53521126760563], [233.0, 381.18840579710155], [234.0, 386.6329113924051], [235.0, 390.61643835616434], [236.0, 379.74390243902445], [237.0, 360.69026548672565], [238.0, 340.1891891891893], [239.0, 333.8255813953487], [240.0, 328.7676767676768], [241.0, 334.7078651685393], [242.0, 339.835294117647], [243.0, 350.9444444444445], [244.0, 373.0112359550561], [245.0, 391.56862745098056], [246.0, 401.1224489795918], [247.0, 410.30769230769226], [248.0, 468.1884057971014], [249.0, 472.1111111111109], [250.0, 425.34089830564494], [1.0, 186.0]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}, {"data": [[245.37718766269523, 418.6334681641037]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8149.666666666667, "minX": 1.56225174E12, "maxY": 2019722.1333333333, "series": [{"data": [[1.56225216E12, 1945929.7], [1.56225186E12, 1898136.1], [1.56225234E12, 235206.46666666667], [1.56225204E12, 1894374.5666666667], [1.56225174E12, 1562087.35], [1.56225222E12, 2019722.1333333333], [1.56225192E12, 2011037.4166666667], [1.5622521E12, 1920262.7666666666], [1.5622518E12, 1958818.4833333334], [1.56225228E12, 1922420.1166666667], [1.56225198E12, 1969273.3333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.56225216E12, 67424.5], [1.56225186E12, 65768.5], [1.56225234E12, 8149.666666666667], [1.56225204E12, 65638.16666666667], [1.56225174E12, 54124.75], [1.56225222E12, 69981.33333333333], [1.56225192E12, 69680.41666666667], [1.5622521E12, 66535.16666666667], [1.5622518E12, 67871.08333333333], [1.56225228E12, 66609.91666666667], [1.56225198E12, 68233.33333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56225234E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 338.8893374411269, "minX": 1.56225174E12, "maxY": 438.3489750627803, "series": [{"data": [[1.56225216E12, 426.0417590539523], [1.56225186E12, 436.86842105263463], [1.56225234E12, 423.8784101599244], [1.56225204E12, 438.3489750627803], [1.56225174E12, 338.8893374411269], [1.56225222E12, 410.4589997808907], [1.56225192E12, 412.80112776784307], [1.5622521E12, 431.93763323154894], [1.5622518E12, 423.86845895343333], [1.56225228E12, 431.5610738641275], [1.56225198E12, 420.9397471910083]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56225234E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 338.7914232090365, "minX": 1.56225174E12, "maxY": 438.25030660515137, "series": [{"data": [[1.56225216E12, 425.9417817954417], [1.56225186E12, 436.76723786209624], [1.56225234E12, 423.78598306679214], [1.56225204E12, 438.25030660515137], [1.56225174E12, 338.7914232090365], [1.56225222E12, 410.3624561787905], [1.56225192E12, 412.70149910603976], [1.5622521E12, 431.83107679898654], [1.5622518E12, 423.7732625455368], [1.56225228E12, 431.46531234713365], [1.56225198E12, 420.84224719101223]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56225234E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4454242831279593, "minX": 1.56225174E12, "maxY": 0.7610042848542787, "series": [{"data": [[1.56225216E12, 0.4580135311842646], [1.56225186E12, 0.4576849099492921], [1.56225234E12, 0.5251646284101606], [1.56225204E12, 0.4454242831279593], [1.56225174E12, 0.7610042848542787], [1.56225222E12, 0.477158194566168], [1.56225192E12, 0.5104662357309862], [1.5622521E12, 0.453188915135102], [1.5622518E12, 0.4982914913445013], [1.56225228E12, 0.4712974419474583], [1.56225198E12, 0.4846348314606736]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56225234E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.56225174E12, "maxY": 571.0, "series": [{"data": [[1.56225216E12, 562.0], [1.56225186E12, 571.0], [1.56225234E12, 547.0], [1.56225204E12, 554.0], [1.56225174E12, 550.0], [1.56225222E12, 528.0], [1.56225192E12, 543.0], [1.5622521E12, 546.0], [1.5622518E12, 561.0], [1.56225228E12, 548.0], [1.56225198E12, 543.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.56225216E12, 326.0], [1.56225186E12, 339.0], [1.56225234E12, 186.0], [1.56225204E12, 338.0], [1.56225174E12, 7.0], [1.56225222E12, 324.0], [1.56225192E12, 337.0], [1.5622521E12, 336.0], [1.5622518E12, 277.0], [1.56225228E12, 334.0], [1.56225198E12, 334.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.56225216E12, 488.0], [1.56225186E12, 487.0], [1.56225234E12, 476.0], [1.56225204E12, 487.0], [1.56225174E12, 474.0], [1.56225222E12, 470.0], [1.56225192E12, 470.0], [1.5622521E12, 481.0], [1.5622518E12, 474.0], [1.56225228E12, 484.0], [1.56225198E12, 477.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.56225216E12, 545.0], [1.56225186E12, 513.0], [1.56225234E12, 535.0], [1.56225204E12, 534.0], [1.56225174E12, 524.0], [1.56225222E12, 503.0], [1.56225192E12, 512.0], [1.5622521E12, 518.0], [1.5622518E12, 518.0], [1.56225228E12, 511.0], [1.56225198E12, 520.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.56225216E12, 510.0], [1.56225186E12, 496.0], [1.56225234E12, 509.3499999999999], [1.56225204E12, 497.0], [1.56225174E12, 485.0], [1.56225222E12, 479.0], [1.56225192E12, 483.0], [1.5622521E12, 495.0], [1.5622518E12, 490.0], [1.56225228E12, 492.0], [1.56225198E12, 491.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56225234E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 113.0, "maxY": 509.5, "series": [{"data": [[113.0, 344.0], [142.0, 39.0], [306.0, 52.0], [330.0, 70.0], [367.0, 112.0], [416.0, 75.0], [446.0, 221.0], [444.0, 295.0], [456.0, 128.0], [479.0, 209.0], [467.0, 234.0], [475.0, 299.0], [465.0, 428.0], [491.0, 155.0], [489.0, 427.5], [490.0, 363.0], [509.0, 463.0], [504.0, 476.0], [508.0, 411.0], [507.0, 476.0], [511.0, 485.0], [510.0, 483.0], [503.0, 489.0], [498.0, 509.5], [500.0, 493.0], [505.0, 489.0], [506.0, 493.0], [499.0, 490.0], [519.0, 472.0], [517.0, 320.5], [518.0, 467.0], [515.0, 467.0], [516.0, 486.0], [513.0, 481.0], [514.0, 487.5], [512.0, 481.0], [525.0, 467.0], [524.0, 471.0], [521.0, 477.0], [520.0, 474.0], [522.0, 479.0], [531.0, 469.0], [527.0, 465.0], [526.0, 469.0], [533.0, 464.0], [532.0, 472.0], [535.0, 469.0], [534.0, 465.0], [530.0, 465.0], [529.0, 469.0], [539.0, 467.0], [540.0, 465.0], [542.0, 465.0], [541.0, 467.0], [528.0, 464.0], [543.0, 466.0], [536.0, 466.0], [537.0, 463.0], [538.0, 470.0], [548.0, 466.0], [547.0, 416.0], [546.0, 462.0], [545.0, 464.0], [559.0, 450.0], [544.0, 465.0], [573.0, 438.0], [564.0, 435.0], [565.0, 431.0], [567.0, 449.0], [566.0, 437.0], [558.0, 464.0], [549.0, 473.0], [551.0, 465.0], [550.0, 460.0], [571.0, 426.0], [572.0, 440.0], [569.0, 440.0], [570.0, 425.0], [568.0, 435.0], [562.0, 438.0], [561.0, 440.0], [560.0, 460.0], [574.0, 433.5], [575.0, 422.0], [556.0, 446.0], [557.0, 442.0], [554.0, 460.0], [555.0, 445.0], [552.0, 452.5], [553.0, 460.0], [600.0, 400.0], [577.0, 431.0], [590.0, 411.0], [593.0, 410.0], [586.0, 415.0], [584.0, 419.0], [585.0, 425.0], [589.0, 417.0], [588.0, 422.0], [587.0, 420.0], [591.0, 425.0], [576.0, 425.0], [599.0, 435.0], [598.0, 423.0], [597.0, 416.0], [604.0, 422.0], [603.0, 406.0], [602.0, 433.5], [601.0, 437.0], [592.0, 441.0], [607.0, 420.0], [606.0, 430.5], [605.0, 414.0], [579.0, 432.0], [578.0, 418.0], [580.0, 424.0], [583.0, 441.0], [582.0, 418.0], [581.0, 430.0], [596.0, 414.0], [594.0, 414.0], [595.0, 412.0], [615.0, 403.0], [629.0, 404.0], [628.0, 390.0], [630.0, 403.0], [631.0, 402.0], [638.0, 399.0], [614.0, 407.0], [613.0, 417.0], [636.0, 391.0], [637.0, 401.0], [634.0, 400.0], [633.0, 388.0], [632.0, 386.0], [612.0, 406.0], [622.0, 403.0], [621.0, 402.0], [618.0, 406.0], [616.0, 421.0], [619.0, 407.0], [620.0, 384.0], [623.0, 407.0], [609.0, 421.0], [608.0, 392.0], [624.0, 400.0], [639.0, 418.0], [626.0, 402.0], [625.0, 371.0], [627.0, 403.0], [611.0, 403.0], [610.0, 417.0], [670.0, 366.0], [644.0, 390.0], [642.0, 404.5], [668.0, 383.5], [645.0, 380.0], [647.0, 393.0], [664.0, 367.0], [660.0, 395.0], [662.0, 373.0], [656.0, 374.0], [657.0, 366.0], [641.0, 397.0], [658.0, 346.0], [649.0, 410.0], [652.0, 365.0], [651.0, 373.0], [653.0, 372.0], [655.0, 381.0], [640.0, 398.0], [696.0, 362.0], [674.0, 368.0], [692.0, 358.0], [673.0, 352.0], [672.0, 370.0], [686.0, 356.0], [687.0, 349.0], [693.0, 368.0], [683.0, 364.0], [682.0, 354.0], [681.0, 354.0], [680.0, 366.0], [679.0, 365.0], [676.0, 343.0], [690.0, 356.0], [691.0, 351.0], [703.0, 355.0], [697.0, 347.0], [699.0, 355.0], [701.0, 361.0], [702.0, 340.0], [684.0, 370.0], [706.0, 348.0], [712.0, 351.0], [731.0, 357.0], [708.0, 350.0], [729.0, 344.0], [728.0, 340.0], [716.0, 342.0], [717.0, 345.0], [719.0, 343.0], [715.0, 353.0], [723.0, 343.0], [725.0, 342.0], [722.0, 348.0], [720.0, 345.0], [736.0, 344.0], [744.0, 342.0], [738.0, 343.0], [740.0, 342.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 744.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 38.5, "minX": 113.0, "maxY": 509.5, "series": [{"data": [[113.0, 343.0], [142.0, 38.5], [306.0, 52.0], [330.0, 70.0], [367.0, 112.0], [416.0, 75.0], [446.0, 221.0], [444.0, 295.0], [456.0, 128.0], [479.0, 209.0], [467.0, 234.0], [475.0, 298.0], [465.0, 428.0], [491.0, 155.0], [489.0, 427.5], [490.0, 363.0], [509.0, 463.0], [504.0, 476.0], [508.0, 411.0], [507.0, 476.0], [511.0, 485.0], [510.0, 483.0], [503.0, 488.0], [498.0, 509.5], [500.0, 493.0], [505.0, 489.0], [506.0, 493.0], [499.0, 490.0], [519.0, 472.0], [517.0, 320.5], [518.0, 467.0], [515.0, 467.0], [516.0, 486.0], [513.0, 481.0], [514.0, 487.0], [512.0, 481.0], [525.0, 467.0], [524.0, 471.0], [521.0, 477.0], [520.0, 474.0], [522.0, 479.0], [531.0, 469.0], [527.0, 465.0], [526.0, 468.0], [533.0, 463.0], [532.0, 472.0], [535.0, 469.0], [534.0, 465.0], [530.0, 465.0], [529.0, 469.0], [539.0, 467.0], [540.0, 465.0], [542.0, 465.0], [541.0, 467.0], [528.0, 464.0], [543.0, 466.0], [536.0, 465.0], [537.0, 463.0], [538.0, 470.0], [548.0, 466.0], [547.0, 416.0], [546.0, 462.0], [545.0, 463.0], [559.0, 450.0], [544.0, 465.0], [573.0, 438.0], [564.0, 434.5], [565.0, 430.5], [567.0, 449.0], [566.0, 437.0], [558.0, 463.0], [549.0, 473.0], [551.0, 465.0], [550.0, 460.0], [571.0, 426.0], [572.0, 440.0], [569.0, 440.0], [570.0, 425.0], [568.0, 435.0], [562.0, 437.0], [561.0, 440.0], [560.0, 460.0], [574.0, 433.0], [575.0, 422.0], [556.0, 446.0], [557.0, 442.0], [554.0, 459.0], [555.0, 445.0], [552.0, 452.0], [553.0, 460.0], [600.0, 400.0], [577.0, 431.0], [590.0, 410.5], [593.0, 410.0], [586.0, 415.0], [584.0, 419.0], [585.0, 425.0], [589.0, 416.0], [588.0, 422.0], [587.0, 420.0], [591.0, 425.0], [576.0, 425.0], [599.0, 435.0], [598.0, 423.0], [597.0, 416.0], [604.0, 422.0], [603.0, 406.0], [602.0, 433.5], [601.0, 437.0], [592.0, 441.0], [607.0, 420.0], [606.0, 430.0], [605.0, 414.0], [579.0, 432.0], [578.0, 418.0], [580.0, 424.0], [583.0, 440.0], [582.0, 418.0], [581.0, 430.0], [596.0, 413.0], [594.0, 413.0], [595.0, 412.0], [615.0, 402.0], [629.0, 404.0], [628.0, 390.0], [630.0, 403.0], [631.0, 401.0], [638.0, 399.0], [614.0, 407.0], [613.0, 417.0], [636.0, 391.0], [637.0, 401.0], [634.0, 400.0], [633.0, 388.0], [632.0, 386.0], [612.0, 406.0], [622.0, 403.0], [621.0, 402.0], [618.0, 406.0], [616.0, 421.0], [619.0, 407.0], [620.0, 383.5], [623.0, 407.0], [609.0, 421.0], [608.0, 392.0], [624.0, 400.0], [639.0, 418.0], [626.0, 402.0], [625.0, 371.0], [627.0, 403.0], [611.0, 403.0], [610.0, 417.0], [670.0, 366.0], [644.0, 390.0], [642.0, 404.0], [668.0, 383.0], [645.0, 380.0], [647.0, 393.0], [664.0, 367.0], [660.0, 395.0], [662.0, 373.0], [656.0, 374.0], [657.0, 366.0], [641.0, 397.0], [658.0, 346.0], [649.0, 410.0], [652.0, 365.0], [651.0, 372.0], [653.0, 372.0], [655.0, 381.0], [640.0, 398.0], [696.0, 361.5], [674.0, 368.0], [692.0, 357.0], [673.0, 352.0], [672.0, 370.0], [686.0, 356.0], [687.0, 349.0], [693.0, 368.0], [683.0, 364.0], [682.0, 354.0], [681.0, 354.0], [680.0, 366.0], [679.0, 365.0], [676.0, 343.0], [690.0, 356.0], [691.0, 351.0], [703.0, 355.0], [697.0, 347.0], [699.0, 355.0], [701.0, 360.5], [702.0, 340.0], [684.0, 370.0], [706.0, 348.0], [712.0, 351.0], [731.0, 357.0], [708.0, 349.0], [729.0, 344.0], [728.0, 340.0], [716.0, 342.0], [717.0, 345.0], [719.0, 343.0], [715.0, 353.0], [723.0, 343.0], [725.0, 342.0], [722.0, 348.0], [720.0, 345.0], [736.0, 344.0], [744.0, 342.0], [738.0, 343.0], [740.0, 342.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 744.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 66.71666666666667, "minX": 1.56225174E12, "maxY": 608.55, "series": [{"data": [[1.56225216E12, 586.3], [1.56225186E12, 571.9], [1.56225234E12, 66.71666666666667], [1.56225204E12, 570.7833333333333], [1.56225174E12, 474.81666666666666], [1.56225222E12, 608.55], [1.56225192E12, 605.9166666666666], [1.5622521E12, 578.55], [1.5622518E12, 590.1833333333333], [1.56225228E12, 579.2], [1.56225198E12, 593.3166666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56225234E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 70.86666666666666, "minX": 1.56225174E12, "maxY": 608.5333333333333, "series": [{"data": [[1.56225216E12, 586.3], [1.56225186E12, 571.9], [1.56225234E12, 70.86666666666666], [1.56225204E12, 570.7666666666667], [1.56225174E12, 470.65], [1.56225222E12, 608.5333333333333], [1.56225192E12, 605.9166666666666], [1.5622521E12, 578.5666666666667], [1.5622518E12, 590.1833333333333], [1.56225228E12, 579.2166666666667], [1.56225198E12, 593.3333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.56225234E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 70.86666666666666, "minX": 1.56225174E12, "maxY": 608.5333333333333, "series": [{"data": [[1.56225216E12, 586.3], [1.56225186E12, 571.9], [1.56225234E12, 70.86666666666666], [1.56225204E12, 570.7666666666667], [1.56225174E12, 470.65], [1.56225222E12, 608.5333333333333], [1.56225192E12, 605.9166666666666], [1.5622521E12, 578.5666666666667], [1.5622518E12, 590.1833333333333], [1.56225228E12, 579.2166666666667], [1.56225198E12, 593.3333333333334]], "isOverall": false, "label": "Requisi\u00E7\u00E3o HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56225234E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 70.86666666666666, "minX": 1.56225174E12, "maxY": 608.5333333333333, "series": [{"data": [[1.56225216E12, 586.3], [1.56225186E12, 571.9], [1.56225234E12, 70.86666666666666], [1.56225204E12, 570.7666666666667], [1.56225174E12, 470.65], [1.56225222E12, 608.5333333333333], [1.56225192E12, 605.9166666666666], [1.5622521E12, 578.5666666666667], [1.5622518E12, 590.1833333333333], [1.56225228E12, 579.2166666666667], [1.56225198E12, 593.3333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.56225234E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

